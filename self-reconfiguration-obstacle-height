import numpy as np
 
#Creating the starting array and defining the obstacle height
heightobs = int(input("Height of Obstacle:"))
height = heightobs + 2
grid = height*5
a = np.zeros((height,5))
sections0 = np.arange(grid).reshape(height,5)
x=len(a)-1
a[:,2] = 2
a[0]=0
a[1]=0
a[height-1,3]=1
print(" ")
 
#Defining the first reconfiguration rule for mounting the obstacle
def firstcond():
 xall=len(a)
 for i in range(1,xall):
   for j in range(1,5):
     if (a[i,j] == 1 or a[i,j] == 3) and (a[i,j-1] == 1 or a[i,j-1] == 3) and a[i-1,j-1] == 0:
       switch = a[i,j]
       a[i,j] = a[i-1,j-1]
       a[i-1,j-1] = switch
       print(a)
       print(" ")
       print(firstcond())
 
#Defining the other reconfiguration rules for mounting the obstacle
def otherconds():
 xall=len(a)
 for i in range(1,xall):
   for j in range(1,5):
     if 0 not in a[:,2]:
       break
     if (a[i,j] == 1 or a[i,j]==3) and (a[i,j-1] == 1 or a[i,j-1] == 3) and (a[i-1,j-1] == 1 or a[i-1,j-1] == 3):
       switch1 = a[i,j]
       a[i,j] = a[i-1,j]
       a[i-1,j] = switch1
       print(a)
       print(" ")
     if (a[i,j] == 1 or a[i,j]==3) and a[i,j-1] == 0 and (a[i+1,j] == 1 or a[i+1,j] == 3) and a[i+1,j-1]==2:
       switch2 = a[i,j]
       a[i,j] = a[i,j-1]
       a[i,j-1] = switch2
       print(a)
       print(" ")
     if a[xall-1,j]==0 and (a[xall-1,j-1] == 1 or a[xall-1,j-1] == 3) and 1 not in a[:,4]:
       a[xall-1,j]= 1
       print(a)
       print(" ")
       print(otherconds())
 
#Recognizing that a module is next to an obstacle and should stay stationary until the task is complete
def makethree():
 xall=len(a)
 for i in range(1,xall):
     for j in range(1,4):
       if (a[i,j] == 1 and a[i,j-1] == 2) or (a[i,j] == 1 and a[i+1,j] == 2):
         a[i,j] = 3
         print(a)
         print(" ")
 
#Recognizing that a module is next to an obstacle and should stay stationary until the task is complete
def makethreedown():
 xall=len(a)
 for i in range(1,xall):
     for j in range(1,4):
       if a[i,j] == 1 and a[i,j+1] == 2:
         a[i,j] = 3
         print(a)
         print(" ")
 
#Defining the reconfiguration rules for dismounting the obstacle
def downcond():
 xall=len(a)
 makethreedown()
 for i in range(1,xall):
   for j in range(1,5):
     if (a[i,j]==1 or a[i,j]==3) and a[i,j-1]==0 and (a[i-1,j]==1):
       switch = a[i,j-1]
       a[i,j-1] = a[i-1,j]
       a[i-1,j] = switch
       print(a)
       print(" ")
     if (a[i,j]==1 or a[i,j]==3) and (a[i,j-1]==1) and (a[i+1,j]==0):
       switch2 = a[i,j-1]
       a[i,j-1] = a[i+1,j]
       a[i+1,j] = switch2
       print(a)
       print(" ")
     if (a[i,j]==1 or a[i,j]==3) and (a[i,j-1]==1) and (a[i+1,j-1]==0):
       switch1 = a[i,j-1]
       a[i,j-1] = a[i+1,j-1]
       a[i+1,j-1] = switch1
       print(a)
       print(" ")
     if (a[i,j]==1) and (a[i,j-1]==1 or a[i,j-1]==3) and a[i-1,j-1] == 0:
       switch = a[i,j]
       a[i,j] = a[i-1,j-1]
       a[i-1,j-1] = switch
       print(a)
       print(" ")
       print(downcond())
     if 1 not in a:
       a[xall-1,4]= 1
       print(a)
       print(" ")
     if (a[i,j] == 1 or a[i,j]==3) and (a[i,j-1] == 1 or a[i,j-1] == 3) and (a[i-1,j-1] == 1 or a[i-1,j-1] == 3):
       switch1 = a[i,j]
       a[i,j] = a[i-1,j]
       a[i-1,j] = switch1
       print(a)
       print(" ")
 
#Loop for mounting the obstacle
def moveup():
 while 0 in a[:,2]:
   makethree()
   firstcond()
   otherconds()
print(moveup())
 
#Loop for dismounting the obstacle
def movedown():
 xall=len(a)
 while a[xall-1,1]==0:
   downcond()
print(movedown())
